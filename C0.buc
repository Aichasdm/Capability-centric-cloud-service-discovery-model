<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.contextFile org.eventb.core.configuration="org.eventb.core.fwd;de.prob.symbolic.ctxBase" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1742219414106" org.eventb.texttools.text_representation="context C0&#10;&#10;sets PROPERTY // Represents domain-specific feature e.g price , weight , to, to&#10;     SYMBOL // represents a variable to access the property value&#10;     GENERALVALUES //the set of all Most general value(MGV). it can be seen as type of values that property can have including integers, float,  locations, temperatures...&#10;     Expression&#10;&#10;constants PropertyEntry // &lt;property,value&gt; e.g &lt;to,Sydney&gt;&#10;          possibleValues // possible values of a property it refers to &quot;value&quot; in a propertyentry&#10;          /* type of values of a property */&#10;          SingleValues /* a set of values that can been seen as instances(set of one element) or subclasses(set of many elements) (e.g {23} , {sydney} , {Paris},Europe:{France,Germany,italy...},odds numbers:{1,3,5,7,9...}) FOR NEXT Singlevalues represents a subset of Generalvalues it can have one element(instance) or many(subclass)   */&#10;          ConditionalValues //  (set) value that is given to a property when specific condition holds e.g price = 50 if weight &gt; 20&#10;          EnumerationValues // an enumeration of values e.g {1,4,10,300}, {Sydney,Melbourne}&#10;          ConstrainedValues // value of a property depends on a constraint if x satisfies such constraint then x belongs to the set of values&#10;          FunctionalValues // value depends on other properties e.g price = weigh*5 +10 */&#10;          hasSymbol // symbol of a property&#10;          hasMGV // the most general value of a property e.g hasMGV(price) is integer or float&#10;          Const // Constructor of ConstrainedValues&#10;          satisfies // function that returns if a value(s) satisfies a constraint&#10;          FN // constructor of functionalvalues&#10;          condition // a condition on the value of a property&#10;          CND // constructor of conditionalvalues&#10;          Enum // constructor of Enumerationvalues&#10;          Capability // set of Capabilities. capability refers to a service' capability(what it can do).here we define a service as a capability&#10;          getPossibleValuesOfPonCapability // set of values of a property on a capability&#10;          getPropertiesForCapability // set of properties of a capability&#10;          f // function used in FunctionalValues&#10;          actionCategory // special property that refers to the action that the capability can do&#10;          Capability_valid // set of valid capabilities(structurally valid)&#10;&#10;&#10;axioms&#10;  @AXM_s hasSymbol ∈ PROPERTY → SYMBOL // a property has a symbol&#10;  @AXM_pv possibleValues ⊆  GENERALVALUES //possible values of a property are always in the most general value of such property&#10;  @AXM_p1 ConstrainedValues ⊆ possibleValues //ConstraindValues is a type of possibleValues of a property&#10;  @AXM_p2 SingleValues ⊆ possibleValues //SingleValues is a type of possibleValues. SingleValues is simply any set of possibleValues=&gt; any set of GENERALVALUES. hence, in the next we use simply a v&lt;:GENERALVALUES to say v is a SingleValues&#10;  @AXM_p3 ConditionalValues ⊆ possibleValues //ConditionalValues is a type of possibleValues of a property&#10;  @AXM_p5 EnumerationValues ⊆ possibleValues //EnumerationValues is a type of possibleValues of a property&#10;  @AXM_p6 FunctionalValues ⊆ possibleValues //FunctionalValues is a type of possibleValues of a property&#10;  @AXM_hasValue hasMGV ∈ PROPERTY → ℙ(GENERALVALUES) //if we have a property to where to get as values Paris,new york,sydney... then hasMGV(to)=location&#10;  @AXM_PropertyEntry PropertyEntry = PROPERTY ×  ℙ(possibleValues) // pe1= to↦Australia when we consider australia as one element or (pe1=to↦{Australia} when we consider Australia as a set of value&#10;/* when we say the value of property p where pe = p-v we mean the set v. we can sometimes say also the possible values of p to refer v*/&#10;  @axm_actionCategory actionCategory ∈ PROPERTY // the action of a capability is a property that should be in all capabilities. it define the action that the capability or service can do. For example a service that ships packages from a location to another one has as action deliver or shipping; a service that buy coffee has as action buying coffee...&#10;  @AXM_Capability Capability = ℙ(PropertyEntry) // c1 ={actionCategory↦shipping,to↦Australia} [set] a capability is a set of property entries&#10;  @AXM_getPropertiesForCapabilityStructure getPropertiesForCapability ∈ Capability  → ℙ(PROPERTY)//retrieve the properties of a capability&#10;  @AXM_getPropertiesForCapability ∀cap· cap ∈ Capability ⇒ getPropertiesForCapability(cap)= dom(cap) //the properties of a capability are the domain of such capability. getPropertiesForCapability(c1)={actionCategory,to}&#10;  @AXM_getPossibleValuesOfPonCapabilityStructure getPossibleValuesOfPonCapability ∈ Capability × PROPERTY → ℙ(possibleValues) //retrieve the values of a property in a capability&#10;  @AXM_getPossibleValuesOfPonCapability ∀cap ,p · cap ∈ Capability ∧ p  ∈ getPropertiesForCapability(cap)&#10;                                        ⇒ getPossibleValuesOfPonCapability(cap↦p)= union(ran({p}◁cap)) // getPossibleValuesOfPonPE(c1↦actionCategory)=union({shipping}) = shipping&#10;  @AXM_PEvalidity ∀p,v· p∈PROPERTY ∧ v ⊆  hasMGV(p)⇒ p↦v∈ PropertyEntry // if we have a value v that belongs to a property(p) MGV then p↦v is a valid propertyEntry&#10;  theorem @THM_PEvalidity ∀v,p· p∈ PROPERTY ∧ v ⊆  hasMGV(p) ⇒ v ⊆ possibleValues // derived from the axiom @AXM_PEvalidity (p↦v a propertyEntry=&gt; v⊆ possibleValues of p  )&#10;  @AXM_ConstStructure Const ∈   PROPERTY × Expression →  ℙ(ConstrainedValues) // constructor of constrainedValues. Const is a relation that takes a property and an expression and returns a set of contrained values.&#10;  @AXM_satisfies satisfies ∈ GENERALVALUES × Expression → BOOL // generic definition. we used as an abstract relation. I have defined its semantic for Nat in C_Nat context. satifies returns a boolean indicating if a value is &quot;satisfying&quot; an expression&#10;  @AXM_Const ∀ p,exp·  p ∈  PROPERTY ∧ exp ∈ Expression ⇒&#10;             Const(p↦exp)= {x∣  satisfies(x↦exp) = TRUE ∧ x ∈ hasMGV(p)} // const returns a set of property values(values are in possible values of p) that satisfies the expression e.g Const(c2↦price↦lessThan100)={x| x&lt;100}&#10;  @AXM_f f ⊆ PROPERTY× GENERALVALUES ⇸ GENERALVALUES   // f is the set of all possible partial function from PROPERTY× GENERALVALUES to GENERALVALUES this is used in the definition of functionalValues&#10;  @AXM_f2 f = PROPERTY× GENERALVALUES ⇸ GENERALVALUES   // f is the set of all possible partial function from PROPERTY× GENERALVALUES to GENERALVALUES this is used in the definition of functionalValues&#10;  @AXM_FunctionalValueStructure FN ∈ Capability × PROPERTY×PROPERTY × f →   ℙ(FunctionalValues)&#10;  /* constructor of Functional Value&#10;     i added pf↦x ∈ dom(fn) as f is a partial function. FN allows to define the value of a property p by means of another property in the same capability that's why FN is linked to a capability.It takes a capability, a property p for which we define a functional value, another property pf of the same capability which is used in a function in &quot;f&quot; in order to compute the values of p. FN returns the values of p  */&#10;  @AXM_FunctionalValue ∀cap,p,pf,fn· cap ∈ Capability ∧ p ∈  getPropertiesForCapability(cap) ∧ pf ∈ getPropertiesForCapability(cap) ∧&#10;                       p ≠ pf ∧ fn ∈ f∧ ran(fn)⊆ hasMGV(p)     ⇒&#10;                       FN(cap↦p↦pf↦fn)={x· x ∈ getPossibleValuesOfPonCapability(cap↦pf) ∧ pf↦x ∈ dom(fn)∣fn(pf↦x)}&#10;  /* capability=c2; property: price ; property:weight; f: 2 *weight FN(c2↦price↦2*weight)= {2*w| w ∈ getPossibleValuesOfPonCapability(c2↦w) }&#10;      */&#10;  @AXM_ConditionStructure condition ∈  Capability × PROPERTY  × ℙ(GENERALVALUES) → BOOL // used in the definition of conditionalvalue. it refers to the condition imposed on the values of a property condition(c↦price↦{0..50} ) this returns true iff the possible values of price in capability c is in {0..50}&#10;  @AXM_ConditionalValueStructure CND ∈ Capability × PROPERTY  × ℙ(GENERALVALUES)× ℙ(GENERALVALUES)× BOOL → ℙ(ConditionalValues) // Constructor of ConditionalValue. CND allows to affect a conditional value to a property of a capability.it enables to affect a value to a property when a condition on another property of the same capability holds. To remove ambiguity on the value of the property when the condition does not hold,we define to values v_p and v_p2. v_p is the value of the property when the condition holds otherwise v_p2 is the value of p&#10;  @AXM_Condition1 ∀cap,p_c,v_c,v_c_else· cap ∈ Capability ∧&#10;                  p_c ∈ getPropertiesForCapability(cap)  ∧&#10;                  v_c ⊆ hasMGV(p_c)∧ v_c_else=getPossibleValuesOfPonCapability(cap↦p_c)∖v_c ∧&#10;                  v_c∩v_c_else=∅    ⇒&#10;                  (condition(cap↦p_c↦v_c)=TRUE ⇔ condition(cap↦p_c↦v_c_else)=FALSE)  /*&#10;&#10;                  weight=w≥100;v_c=w&gt;50 v_c_else=0≤w≤50 condition(weight,v_c)=TRUE⇔ condition(weight,v_C_else)=FALSE&#10;                  */&#10;  @AXM_ConditionSemanticTRUE ∀cap,p_c,v_c· cap ∈ Capability ∧&#10;                             p_c∈ getPropertiesForCapability(cap) ∧ v_c ⊆ hasMGV(p_c) ⇒&#10;                             (condition(cap↦p_c↦v_c)=TRUE ⇔ getPossibleValuesOfPonCapability(cap↦p_c)⊆v_c)&#10;/* condition on capability c,property p_c and the values v_c is true when the all possible values of p_c are in v_c. weight=w&gt;=100;v_c=w&gt;50 =&gt; condition(c,weight,v_C)=true =&gt; weight_value⊆({w&gt;50})&#10;                                    */&#10;  @AXM_ConditionalValueTrue ∀cap,p,p_c,v_c,v_p,v_p2· cap ∈ Capability ∧ {p,p_c}⊆ getPropertiesForCapability(cap)∧ p_c≠p   ∧&#10;                        v_c ⊆ hasMGV(p_c)∧&#10;                        v_p ⊆hasMGV(p) ∧ v_p2 ⊆ hasMGV(p)∧&#10;                            condition(cap↦p_c↦v_c)=TRUE ⇒&#10;                            CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p&#10;  /*  if c1 is a capability, p and p_c twos properties of c1, v_p and v_p2 are in the MGV of p , v_c is in the MGV of p_c and condition(c1↦p_c↦v_c) holds then CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p.For example: condition(c1↦weight↦) CND(c1↦price↦{10}↦{20}↦condition(c1↦weight↦50))=10 if condition(weight,50)=true recursivity is guarranted by rodin&#10;                                    */&#10; @AXM_ConditionalValueFalse ∀cap,p,p_c,v_c,v_p,v_p2· cap ∈ Capability ∧ {p,p_c}⊆ getPropertiesForCapability(cap)∧ p_c≠p   ∧&#10;                             v_c ⊆ hasMGV(p_c)∧  v_p ⊆hasMGV(p)∧&#10;                             v_p2 ⊆hasMGV(p)  ∧&#10;                             condition(cap↦p_c↦v_c)=FALSE ⇒&#10;                             CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))= v_p2&#10; /*  if c1 is a capability, p and p_c twos properties of c1, v_p and v_p2 are in the MGV of p , v_c is in the MGV of p_c and condition(c1↦p_c↦v_c) holds then CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p2.&#10;   For example: CND(c1↦price↦10↦20↦condition(c1↦weight↦50))=20 if condition(weight,50)=false&#10;                                    */&#10;  @AXM_EnumerationValueStructure Enum  ∈  ℙ(ℙ(GENERALVALUES)) →  ℙ(EnumerationValues)&#10;  /* Constructor of EnumerationValue. We consider that when enumerationValue has many ConditionalValue and ConstrainedValue these values are computed to SingleValues a subsets of MGV of the proprety&#10;  e.g Enum({1,2},Const(lessThan4),CND(c1↦price↦10↦20↦condition(c1↦weight↦50)))={1,2,3,set_returned_by_CND} */&#10;  @AXM_EnumerationValue ∀S·  S⊆ ℙ(GENERALVALUES)   ⇒Enum(S)=union(S) // Enum({1,2},Const(lessThan4))={1,2,3}&#10;  theorem @THM_enum ∀v1,v2· v1 ⊆ GENERALVALUES ∧ v2⊆ GENERALVALUES⇒ Enum({v1,v2})=v1 ∪ v2&#10;  @AXM_capability_validStructure Capability_valid ⊆  Capability // set of valid capabilities is a subset of capabilities&#10;  @AXM_capability_valid ∀c·  c ∈ Capability ⇒&#10;                        (c ∈ Capability_valid  ⇔&#10;                        (actionCategory∈getPropertiesForCapability(c)  ∧&#10;                        (∀p1,p2,v1,v2· p1↦v1 ∈c ∧ p2↦v2∈c ∧v1≠v2 ⇒ p1≠p2)∧&#10;                        (∀pe,p,v· pe∈ c ∧pe=p↦v ⇒ v≠∅ ∧ v ⊆  hasMGV(p) ) )&#10;                        )  /* a valid capability must have i)&#10;                        an actionCategory property to specify the action of such capability ;ii)we cannot have twos different values for the same property and iii) each value of a property must be not empty set and a value in the MGV of such property*/&#10;  @AXM_hasMGV ∀p· p ∈ PROPERTY ⇒ hasMGV(p)≠∅ //a Most General value (MGV) cannot be empty&#10;end&#10;" version="3">
    <org.eventb.core.carrierSet name="_gUuY8KajEe-qvvezQUZsVA" org.eventb.core.comment="Represents domain-specific feature e.g price , weight , to, to" org.eventb.core.generated="false" org.eventb.core.identifier="PROPERTY"/>
    <org.eventb.core.carrierSet name="_gUuY8aajEe-qvvezQUZsVA" org.eventb.core.comment="represents a variable to access the property value" org.eventb.core.generated="false" org.eventb.core.identifier="SYMBOL"/>
    <org.eventb.core.constant name="_gUvABqajEe-qvvezQUZsVA" org.eventb.core.comment="&lt;property,value&gt; e.g &lt;to,Sydney&gt;" org.eventb.core.generated="false" org.eventb.core.identifier="PropertyEntry"/>
    <org.eventb.core.axiom name="_JMVElKakEe-qvvezQUZsVA" org.eventb.core.comment="a property has a symbol" org.eventb.core.generated="false" org.eventb.core.label="AXM_s" org.eventb.core.predicate="hasSymbol ∈ PROPERTY → SYMBOL"/>
    <org.eventb.core.axiom name="_Q2H1kKamEe-qvvezQUZsVA" org.eventb.core.comment="possible values of a property are always in the most general value of such property" org.eventb.core.generated="false" org.eventb.core.label="AXM_pv" org.eventb.core.predicate="possibleValues ⊆  GENERALVALUES"/>
    <org.eventb.core.axiom name="_pXP40OF8Ee-OnJfusbHiIA" org.eventb.core.comment="ConstraindValues is a type of possibleValues of a property" org.eventb.core.generated="false" org.eventb.core.label="AXM_p1" org.eventb.core.predicate="ConstrainedValues ⊆ possibleValues"/>
    <org.eventb.core.axiom name="_pXP40eF8Ee-OnJfusbHiIA" org.eventb.core.comment="SingleValues is a type of possibleValues. SingleValues is simply any set of possibleValues=&gt; any set of GENERALVALUES. hence, in the next we use simply a v&lt;:GENERALVALUES to say v is a SingleValues" org.eventb.core.generated="false" org.eventb.core.label="AXM_p2" org.eventb.core.predicate="SingleValues ⊆ possibleValues"/>
    <org.eventb.core.axiom name="_pXP40uF8Ee-OnJfusbHiIA" org.eventb.core.comment="ConditionalValues is a type of possibleValues of a property" org.eventb.core.generated="false" org.eventb.core.label="AXM_p3" org.eventb.core.predicate="ConditionalValues ⊆ possibleValues"/>
    <org.eventb.core.axiom name="_pXP41OF8Ee-OnJfusbHiIA" org.eventb.core.comment="EnumerationValues is a type of possibleValues of a property" org.eventb.core.generated="false" org.eventb.core.label="AXM_p5" org.eventb.core.predicate="EnumerationValues ⊆ possibleValues"/>
    <org.eventb.core.axiom name="_pXQf4OF8Ee-OnJfusbHiIA" org.eventb.core.comment="FunctionalValues is a type of possibleValues of a property" org.eventb.core.generated="false" org.eventb.core.label="AXM_p6" org.eventb.core.predicate="FunctionalValues ⊆ possibleValues"/>
    <org.eventb.core.axiom name="_h-WXQKalEe-qvvezQUZsVA" org.eventb.core.comment="if we have a property to where to get as values Paris,new york,sydney... then hasMGV(to)=location" org.eventb.core.generated="false" org.eventb.core.label="AXM_hasValue" org.eventb.core.predicate="hasMGV ∈ PROPERTY → ℙ(GENERALVALUES)"/>
    <org.eventb.core.axiom name="_gUvnEaajEe-qvvezQUZsVA" org.eventb.core.comment="pe1= to↦Australia when we consider australia as one element or (pe1=to↦{Australia} when we consider Australia as a set of value&#10;when we say the value of property p where pe = p-v we mean the set v. we can sometimes say also the possible values of p to refer v" org.eventb.core.generated="false" org.eventb.core.label="AXM_PropertyEntry" org.eventb.core.predicate="PropertyEntry = PROPERTY ×  ℙ(possibleValues)"/>
    <org.eventb.core.axiom name="_NwQhUL0iEe-cSLm9VOlKcw" org.eventb.core.comment="the action of a capability is a property that should be in all capabilities. it define the action that the capability or service can do. For example a service that ships packages from a location to another one has as action deliver or shipping; a service that buy coffee has as action buying coffee..." org.eventb.core.generated="false" org.eventb.core.label="axm_actionCategory" org.eventb.core.predicate="actionCategory ∈ PROPERTY"/>
    <org.eventb.core.axiom name="_h-QzAKfqEe-HWPN5LwE_LA" org.eventb.core.comment="c1 ={actionCategory↦shipping,to↦Australia} [set] a capability is a set of property entries" org.eventb.core.generated="false" org.eventb.core.label="AXM_Capability" org.eventb.core.predicate="Capability = ℙ(PropertyEntry)"/>
    <org.eventb.core.axiom name="_zROg4qfwEe-HWPN5LwE_LA" org.eventb.core.comment="retrieve the properties of a capability" org.eventb.core.generated="false" org.eventb.core.label="AXM_getPropertiesForCapabilityStructure" org.eventb.core.predicate="getPropertiesForCapability ∈ Capability  → ℙ(PROPERTY)"/>
    <org.eventb.core.axiom name="_gDttsKfxEe-HWPN5LwE_LA" org.eventb.core.comment="the properties of a capability are the domain of such capability. getPropertiesForCapability(c1)={actionCategory,to}" org.eventb.core.generated="false" org.eventb.core.label="AXM_getPropertiesForCapability" org.eventb.core.predicate="∀cap· cap ∈ Capability ⇒ getPropertiesForCapability(cap)= dom(cap)"/>
    <org.eventb.core.axiom name="_CyAxYKf1Ee-HWPN5LwE_LA" org.eventb.core.comment="retrieve the values of a property in a capability" org.eventb.core.generated="false" org.eventb.core.label="AXM_getPossibleValuesOfPonCapabilityStructure" org.eventb.core.predicate="getPossibleValuesOfPonCapability ∈ Capability × PROPERTY → ℙ(possibleValues)"/>
    <org.eventb.core.axiom name="_CyAxYaf1Ee-HWPN5LwE_LA" org.eventb.core.comment="getPossibleValuesOfPonPE(c1↦actionCategory)=union({shipping}) = shipping" org.eventb.core.generated="false" org.eventb.core.label="AXM_getPossibleValuesOfPonCapability" org.eventb.core.predicate="∀cap ,p · cap ∈ Capability ∧ p  ∈ getPropertiesForCapability(cap)&#10;                                        ⇒ getPossibleValuesOfPonCapability(cap↦p)= union(ran({p}◁cap))"/>
    <org.eventb.core.axiom name="_IhqdAKgPEe-HWPN5LwE_LA" org.eventb.core.comment="if we have a value v that belongs to a property(p) MGV then p↦v is a valid propertyEntry" org.eventb.core.generated="false" org.eventb.core.label="AXM_PEvalidity" org.eventb.core.predicate="∀p,v· p∈PROPERTY ∧ v ⊆  hasMGV(p)⇒ p↦v∈ PropertyEntry"/>
    <org.eventb.core.axiom name="_NPSx4K_zEe-1rPj0DjDWfg" org.eventb.core.comment="derived from the axiom @AXM_PEvalidity (p↦v a propertyEntry=&gt; v⊆ possibleValues of p  )" org.eventb.core.generated="false" org.eventb.core.label="THM_PEvalidity" org.eventb.core.predicate="∀v,p· p∈ PROPERTY ∧ v ⊆  hasMGV(p) ⇒ v ⊆ possibleValues" org.eventb.core.theorem="true"/>
    <org.eventb.core.constant name="_oBEqQqdLEe-qvvezQUZsVA" org.eventb.core.comment="possible values of a property it refers to &quot;value&quot; in a propertyentry&#10;type of values of a property " org.eventb.core.generated="false" org.eventb.core.identifier="possibleValues"/>
    <org.eventb.core.constant name="_SX_KUKc9Ee-qvvezQUZsVA" org.eventb.core.comment="a set of values that can been seen as instances(set of one element) or subclasses(set of many elements) (e.g {23} , {sydney} , {Paris},Europe:{France,Germany,italy...},odds numbers:{1,3,5,7,9...}) FOR NEXT Singlevalues represents a subset of Generalvalues it can have one element(instance) or many(subclass)   " org.eventb.core.generated="false" org.eventb.core.identifier="SingleValues"/>
    <org.eventb.core.constant name="_SX_KUac9Ee-qvvezQUZsVA" org.eventb.core.comment="(set) value that is given to a property when specific condition holds e.g price = 50 if weight &gt; 20" org.eventb.core.generated="false" org.eventb.core.identifier="ConditionalValues"/>
    <org.eventb.core.constant name="_6D92YLJsEe-1rPj0DjDWfg" org.eventb.core.comment="an enumeration of values e.g {1,4,10,300}, {Sydney,Melbourne}" org.eventb.core.generated="false" org.eventb.core.identifier="EnumerationValues"/>
    <org.eventb.core.constant name="_SX_KU6c9Ee-qvvezQUZsVA" org.eventb.core.comment="value of a property depends on a constraint if x satisfies such constraint then x belongs to the set of values" org.eventb.core.generated="false" org.eventb.core.identifier="ConstrainedValues"/>
    <org.eventb.core.constant name="_Xs9tIKdMEe-qvvezQUZsVA" org.eventb.core.comment="value depends on other properties e.g price = weigh*5 +10 */" org.eventb.core.generated="false" org.eventb.core.identifier="FunctionalValues"/>
    <org.eventb.core.constant name="_JMVEk6akEe-qvvezQUZsVA" org.eventb.core.comment="symbol of a property" org.eventb.core.generated="false" org.eventb.core.identifier="hasSymbol"/>
    <org.eventb.core.constant name="_h-W-UqalEe-qvvezQUZsVA" org.eventb.core.comment="the most general value of a property e.g hasMGV(price) is integer or float" org.eventb.core.generated="false" org.eventb.core.identifier="hasMGV"/>
    <org.eventb.core.constant name="_GHRpEaatEe-qvvezQUZsVA" org.eventb.core.comment="Constructor of ConstrainedValues" org.eventb.core.generated="false" org.eventb.core.identifier="Const"/>
    <org.eventb.core.carrierSet name="_oBFRUKdLEe-qvvezQUZsVA" org.eventb.core.comment="the set of all Most general value(MGV). it can be seen as type of values that property can have including integers, float,  locations, temperatures..." org.eventb.core.generated="false" org.eventb.core.identifier="GENERALVALUES"/>
    <org.eventb.core.constant name="_fuWVMKdCEe-qvvezQUZsVA" org.eventb.core.comment="function that returns if a value(s) satisfies a constraint" org.eventb.core.generated="false" org.eventb.core.identifier="satisfies"/>
    <org.eventb.core.constant name="_oBF4YKdLEe-qvvezQUZsVA" org.eventb.core.comment="constructor of functionalvalues" org.eventb.core.generated="false" org.eventb.core.identifier="FN"/>
    <org.eventb.core.constant name="_eDUk0KhVEe-HWPN5LwE_LA" org.eventb.core.comment="a condition on the value of a property" org.eventb.core.generated="false" org.eventb.core.identifier="condition"/>
    <org.eventb.core.constant name="_oBF4YadLEe-qvvezQUZsVA" org.eventb.core.comment="constructor of conditionalvalues" org.eventb.core.generated="false" org.eventb.core.identifier="CND"/>
    <org.eventb.core.constant name="_6D_EgLJsEe-1rPj0DjDWfg" org.eventb.core.comment="constructor of Enumerationvalues" org.eventb.core.generated="false" org.eventb.core.identifier="Enum"/>
    <org.eventb.core.constant name="_h-cZMKfqEe-HWPN5LwE_LA" org.eventb.core.comment="set of Capabilities. capability refers to a service' capability(what it can do).here we define a service as a capability" org.eventb.core.generated="false" org.eventb.core.identifier="Capability"/>
    <org.eventb.core.constant name="_CyCmkKf1Ee-HWPN5LwE_LA" org.eventb.core.comment="set of values of a property on a capability" org.eventb.core.generated="false" org.eventb.core.identifier="getPossibleValuesOfPonCapability"/>
    <org.eventb.core.constant name="_zRdxcKfwEe-HWPN5LwE_LA" org.eventb.core.comment="set of properties of a capability" org.eventb.core.generated="false" org.eventb.core.identifier="getPropertiesForCapability"/>
    <org.eventb.core.constant name="_xzZzwLJ_Ee-1rPj0DjDWfg" org.eventb.core.comment="function used in FunctionalValues" org.eventb.core.generated="false" org.eventb.core.identifier="f"/>
    <org.eventb.core.constant name="_5JwfQLvgEe-RNfueCZ-JRQ" org.eventb.core.comment="special property that refers to the action that the capability can do" org.eventb.core.generated="false" org.eventb.core.identifier="actionCategory"/>
    <org.eventb.core.axiom name="_eELw8LxgEe-LWIXwwKbOjw" org.eventb.core.comment="constructor of constrainedValues. Const is a relation that takes a property and an expression and returns a set of contrained values." org.eventb.core.generated="false" org.eventb.core.label="AXM_ConstStructure" org.eventb.core.predicate="Const ∈   PROPERTY × Expression →  ℙ(ConstrainedValues)"/>
    <org.eventb.core.axiom name="_eELw8bxgEe-LWIXwwKbOjw" org.eventb.core.comment="generic definition. we used as an abstract relation. I have defined its semantic for Nat in C_Nat context. satifies returns a boolean indicating if a value is &quot;satisfying&quot; an expression" org.eventb.core.generated="false" org.eventb.core.label="AXM_satisfies" org.eventb.core.predicate="satisfies ∈ GENERALVALUES × Expression → BOOL"/>
    <org.eventb.core.axiom name="_eEMYALxgEe-LWIXwwKbOjw" org.eventb.core.comment="const returns a set of property values(values are in possible values of p) that satisfies the expression e.g Const(c2↦price↦lessThan100)={x| x&lt;100}" org.eventb.core.generated="false" org.eventb.core.label="AXM_Const" org.eventb.core.predicate="∀ p,exp·  p ∈  PROPERTY ∧ exp ∈ Expression ⇒&#10;             Const(p↦exp)= {x∣  satisfies(x↦exp) = TRUE ∧ x ∈ hasMGV(p)}"/>
    <org.eventb.core.axiom name="_eEMYAbxgEe-LWIXwwKbOjw" org.eventb.core.comment="f is the set of all possible partial function from PROPERTY× GENERALVALUES to GENERALVALUES this is used in the definition of functionalValues" org.eventb.core.generated="false" org.eventb.core.label="AXM_f" org.eventb.core.predicate="f ⊆ PROPERTY× GENERALVALUES ⇸ GENERALVALUES"/>
    <org.eventb.core.axiom name="_wIPdMAM2EfC-DdnJ5x-m5Q" org.eventb.core.comment="f is the set of all possible partial function from PROPERTY× GENERALVALUES to GENERALVALUES this is used in the definition of functionalValues" org.eventb.core.generated="false" org.eventb.core.label="AXM_f2" org.eventb.core.predicate="f = PROPERTY× GENERALVALUES ⇸ GENERALVALUES"/>
    <org.eventb.core.axiom name="_eEMYArxgEe-LWIXwwKbOjw" org.eventb.core.comment="constructor of Functional Value&#10;     i added pf↦x ∈ dom(fn) as f is a partial function. FN allows to define the value of a property p by means of another property in the same capability that's why FN is linked to a capability.It takes a capability, a property p for which we define a functional value, another property pf of the same capability which is used in a function in &quot;f&quot; in order to compute the values of p. FN returns the values of p  " org.eventb.core.generated="false" org.eventb.core.label="AXM_FunctionalValueStructure" org.eventb.core.predicate="FN ∈ Capability × PROPERTY×PROPERTY × f →   ℙ(FunctionalValues)"/>
    <org.eventb.core.axiom name="_eEMYA7xgEe-LWIXwwKbOjw" org.eventb.core.comment="capability=c2; property: price ; property:weight; f: 2 *weight FN(c2↦price↦2*weight)= {2*w| w ∈ getPossibleValuesOfPonCapability(c2↦w) }&#10;      " org.eventb.core.generated="false" org.eventb.core.label="AXM_FunctionalValue" org.eventb.core.predicate="∀cap,p,pf,fn· cap ∈ Capability ∧ p ∈  getPropertiesForCapability(cap) ∧ pf ∈ getPropertiesForCapability(cap) ∧&#10;                       p ≠ pf ∧ fn ∈ f∧ ran(fn)⊆ hasMGV(p)     ⇒&#10;                       FN(cap↦p↦pf↦fn)={x· x ∈ getPossibleValuesOfPonCapability(cap↦pf) ∧ pf↦x ∈ dom(fn)∣fn(pf↦x)}"/>
    <org.eventb.core.axiom name="_eEMYBLxgEe-LWIXwwKbOjw" org.eventb.core.comment="used in the definition of conditionalvalue. it refers to the condition imposed on the values of a property condition(c↦price↦{0..50} ) this returns true iff the possible values of price in capability c is in {0..50}" org.eventb.core.generated="false" org.eventb.core.label="AXM_ConditionStructure" org.eventb.core.predicate="condition ∈  Capability × PROPERTY  × ℙ(GENERALVALUES) → BOOL"/>
    <org.eventb.core.axiom name="_eEMYBbxgEe-LWIXwwKbOjw" org.eventb.core.comment="Constructor of ConditionalValue. CND allows to affect a conditional value to a property of a capability.it enables to affect a value to a property when a condition on another property of the same capability holds. To remove ambiguity on the value of the property when the condition does not hold,we define to values v_p and v_p2. v_p is the value of the property when the condition holds otherwise v_p2 is the value of p" org.eventb.core.generated="false" org.eventb.core.label="AXM_ConditionalValueStructure" org.eventb.core.predicate="CND ∈ Capability × PROPERTY  × ℙ(GENERALVALUES)× ℙ(GENERALVALUES)× BOOL → ℙ(ConditionalValues)"/>
    <org.eventb.core.axiom name="_eEMYBrxgEe-LWIXwwKbOjw" org.eventb.core.comment="&#10;&#10;                  weight=w≥100;v_c=w&gt;50 v_c_else=0≤w≤50 condition(weight,v_c)=TRUE⇔ condition(weight,v_C_else)=FALSE&#10;                  " org.eventb.core.generated="false" org.eventb.core.label="AXM_Condition1" org.eventb.core.predicate="∀cap,p_c,v_c,v_c_else· cap ∈ Capability ∧&#10;                  p_c ∈ getPropertiesForCapability(cap)  ∧&#10;                  v_c ⊆ hasMGV(p_c)∧ v_c_else=getPossibleValuesOfPonCapability(cap↦p_c)∖v_c ∧&#10;                  v_c∩v_c_else=∅    ⇒&#10;                  (condition(cap↦p_c↦v_c)=TRUE ⇔ condition(cap↦p_c↦v_c_else)=FALSE)"/>
    <org.eventb.core.axiom name="_eEMYB7xgEe-LWIXwwKbOjw" org.eventb.core.comment="condition on capability c,property p_c and the values v_c is true when the all possible values of p_c are in v_c. weight=w&gt;=100;v_c=w&gt;50 =&gt; condition(c,weight,v_C)=true =&gt; weight_value⊆({w&gt;50})&#10;                                    " org.eventb.core.generated="false" org.eventb.core.label="AXM_ConditionSemanticTRUE" org.eventb.core.predicate="∀cap,p_c,v_c· cap ∈ Capability ∧&#10;                             p_c∈ getPropertiesForCapability(cap) ∧ v_c ⊆ hasMGV(p_c) ⇒&#10;                             (condition(cap↦p_c↦v_c)=TRUE ⇔ getPossibleValuesOfPonCapability(cap↦p_c)⊆v_c)"/>
    <org.eventb.core.axiom name="_eEMYCLxgEe-LWIXwwKbOjw" org.eventb.core.comment="if c1 is a capability, p and p_c twos properties of c1, v_p and v_p2 are in the MGV of p , v_c is in the MGV of p_c and condition(c1↦p_c↦v_c) holds then CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p.For example: condition(c1↦weight↦) CND(c1↦price↦{10}↦{20}↦condition(c1↦weight↦50))=10 if condition(weight,50)=true recursivity is guarranted by rodin&#10;                                    " org.eventb.core.generated="false" org.eventb.core.label="AXM_ConditionalValueTrue" org.eventb.core.predicate="∀cap,p,p_c,v_c,v_p,v_p2· cap ∈ Capability ∧ {p,p_c}⊆ getPropertiesForCapability(cap)∧ p_c≠p   ∧&#10;                        v_c ⊆ hasMGV(p_c)∧&#10;                        v_p ⊆hasMGV(p) ∧ v_p2 ⊆ hasMGV(p)∧&#10;                            condition(cap↦p_c↦v_c)=TRUE ⇒&#10;                            CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p"/>
    <org.eventb.core.axiom name="_eEM_ELxgEe-LWIXwwKbOjw" org.eventb.core.comment="if c1 is a capability, p and p_c twos properties of c1, v_p and v_p2 are in the MGV of p , v_c is in the MGV of p_c and condition(c1↦p_c↦v_c) holds then CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))=v_p2.&#10;   For example: CND(c1↦price↦10↦20↦condition(c1↦weight↦50))=20 if condition(weight,50)=false&#10;                                    " org.eventb.core.generated="false" org.eventb.core.label="AXM_ConditionalValueFalse" org.eventb.core.predicate="∀cap,p,p_c,v_c,v_p,v_p2· cap ∈ Capability ∧ {p,p_c}⊆ getPropertiesForCapability(cap)∧ p_c≠p   ∧&#10;                             v_c ⊆ hasMGV(p_c)∧  v_p ⊆hasMGV(p)∧&#10;                             v_p2 ⊆hasMGV(p)  ∧&#10;                             condition(cap↦p_c↦v_c)=FALSE ⇒&#10;                             CND(cap↦p↦v_p↦v_p2↦condition(cap↦p_c↦v_c))= v_p2"/>
    <org.eventb.core.axiom name="_eEM_EbxgEe-LWIXwwKbOjw" org.eventb.core.comment="Constructor of EnumerationValue. We consider that when enumerationValue has many ConditionalValue and ConstrainedValue these values are computed to SingleValues a subsets of MGV of the proprety&#10;  e.g Enum({1,2},Const(lessThan4),CND(c1↦price↦10↦20↦condition(c1↦weight↦50)))={1,2,3,set_returned_by_CND} " org.eventb.core.generated="false" org.eventb.core.label="AXM_EnumerationValueStructure" org.eventb.core.predicate="Enum  ∈  ℙ(ℙ(GENERALVALUES)) →  ℙ(EnumerationValues)"/>
    <org.eventb.core.axiom name="_eEM_ErxgEe-LWIXwwKbOjw" org.eventb.core.comment="Enum({1,2},Const(lessThan4))={1,2,3}" org.eventb.core.generated="false" org.eventb.core.label="AXM_EnumerationValue" org.eventb.core.predicate="∀S·  S⊆ ℙ(GENERALVALUES)   ⇒Enum(S)=union(S)"/>
    <org.eventb.core.axiom name="_eEM_E7xgEe-LWIXwwKbOjw" org.eventb.core.generated="false" org.eventb.core.label="THM_enum" org.eventb.core.predicate="∀v1,v2· v1 ⊆ GENERALVALUES ∧ v2⊆ GENERALVALUES⇒ Enum({v1,v2})=v1 ∪ v2" org.eventb.core.theorem="true"/>
    <org.eventb.core.constant name="_XAfiYLx5Ee-cSLm9VOlKcw" org.eventb.core.comment="set of valid capabilities(structurally valid)" org.eventb.core.generated="false" org.eventb.core.identifier="Capability_valid"/>
    <org.eventb.core.axiom name="_XAgJcLx5Ee-cSLm9VOlKcw" org.eventb.core.comment="set of valid capabilities is a subset of capabilities" org.eventb.core.generated="false" org.eventb.core.label="AXM_capability_validStructure" org.eventb.core.predicate="Capability_valid ⊆  Capability"/>
    <org.eventb.core.axiom name="_q6ytoLx5Ee-cSLm9VOlKcw" org.eventb.core.comment="a valid capability must have i)&#10;                        an actionCategory property to specify the action of such capability ;ii)we cannot have twos different values for the same property and iii) each value of a property must be not empty set and a value in the MGV of such property" org.eventb.core.generated="false" org.eventb.core.label="AXM_capability_valid" org.eventb.core.predicate="∀c·  c ∈ Capability ⇒&#10;                        (c ∈ Capability_valid  ⇔&#10;                        (actionCategory∈getPropertiesForCapability(c)  ∧&#10;                        (∀p1,p2,v1,v2· p1↦v1 ∈c ∧ p2↦v2∈c ∧v1≠v2 ⇒ p1≠p2)∧&#10;                        (∀pe,p,v· pe∈ c ∧pe=p↦v ⇒ v≠∅ ∧ v ⊆  hasMGV(p) ) )&#10;                        )"/>
    <org.eventb.core.axiom name="_9fgd0MGOEe-Ex4VsVOFA7Q" org.eventb.core.comment="a Most General value (MGV) cannot be empty" org.eventb.core.generated="false" org.eventb.core.label="AXM_hasMGV" org.eventb.core.predicate="∀p· p ∈ PROPERTY ⇒ hasMGV(p)≠∅"/>
    <org.eventb.core.carrierSet name="_wIQrUAM2EfC-DdnJ5x-m5Q" org.eventb.core.generated="false" org.eventb.core.identifier="Expression"/>
</org.eventb.core.contextFile>
