<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.contextFile org.eventb.core.configuration="org.eventb.core.fwd;de.prob.symbolic.ctxBase" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1741005851764" org.eventb.texttools.text_representation="context C_Nat extends C1&#10;&#10;constants makeGeneralvaluesFromNats allNatLessThanNat allNatLessThanOrEqualNat allNatGreaterThanNat allNatGreaterThanOrEqualNat allNatInRange //ExpNat&#10;          makeExpression // makeRangeNat&#10;          Nat makeGeneralvalueFromNat getNatForGeneralValue getNatsForGeneralValues&#10;&#10;          /*this context is to define NAT and possible relations on it. NAT is considered as a subset of GENERALVALUES. As rodin does not accept to write Nat ⊆  GENERALVALUES,we define NAT as a set Nat  */&#10;&#10;axioms&#10;  @AXM_Nat Nat ⊆  GENERALVALUES // Nat is a subset of GENERALVALUES&#10;  @AXM_EXP1 makeExpression ∈ ℙ(GENERALVALUES) → Expression //mapping to create an expression from a set of generalvalues. this is used in constructor Const&#10;  @AXM_makeGeneralvalueFromNatStructure makeGeneralvalueFromNat ∈ ℕ ↣ Nat // mapping to create a Nat from NAT. this allows to work with properties having as values integers&#10;  @AXM_makeGeneralvaluesFromNatsStructure makeGeneralvaluesFromNats ∈ ℙ(ℕ) ↣  ℙ(Nat) // mapping for a set of NAT. it returns a set of GENERALVALUE(Nat) {5,2} -  makeGeneralvaluesFromNats({5,2})= makeGeneralvaluesFromNats({5}) ∪ makeGeneralvaluesFromNats({2})&#10;  @AXM_makeGeneralvaluesFromNats ∀a· a⊆ℕ   ⇒ makeGeneralvaluesFromNats(a) = { elt· elt ∈ a∣ makeGeneralvalueFromNat(elt)   } // {5,2} -  {mgv{5,2}}&#10;  @AXM_allNatLessThanNat allNatLessThanNat ∈ ℕ → ℙ(ℕ) // retrieve all NAT Less Than a NAT&#10;  @AXM_allNatLessThanNat2 ∀n· n∈ℕ ⇒allNatLessThanNat(n) = {x∣x&lt;n ∧ x∈ℕ} // allNatLessThanNat(3)={0,1,2}&#10;  @AXM_allNatLessThanOrEqualNat allNatLessThanOrEqualNat ∈ ℕ → ℙ(ℕ) // retrieve all NAT Less Than or equal a ℕ&#10;  @AXM_allNatLessThanOrEqualNat2 ∀n· n∈ℕ ⇒allNatLessThanOrEqualNat(n) = { x∣x≤n ∧ x∈ℕ } // allNatLessThanOrEqualNat(3)={0,1,2,4}&#10;  @AXM_allNatGreaterThanNat allNatGreaterThanNat ∈ ℕ → ℙ(ℕ)&#10;  @AXM_allNatGreaterThanNat2 ∀n· n∈ℕ ⇒allNatGreaterThanNat(n) = {x∣x&gt;n ∧ x∈ℕ} // allNatGreaterThanNat(4)={5,6,....}&#10;  @AXM_allNatGreaterThanOrEqualNat allNatGreaterThanOrEqualNat ∈ ℕ → ℙ(ℕ)&#10;  @AXM_allNatGreaterThanOrEqualNat2 ∀n· n∈ℕ ⇒allNatGreaterThanOrEqualNat(n) = {x∣x≥n ∧ x∈ℕ} // allNatGreaterThanOrEqualNat(4)={4,5,6,....}&#10;  @AXM_allNatInRange allNatInRange ∈ ℕ×ℕ → ℙ(ℕ)&#10;  @AXM_allNatInRange2 ∀mn,mx· mn∈ℕ ∧ mx∈ℕ ⇒ allNatInRange(mn↦mx) = {x∣mn≤x ∧ x≤mx ∧ x∈ℕ} // allNatInRange(0↦5)={0,1,2,3,4,5}&#10;  @AXM_satisfies ∀exp,n,p·   p ∈ PROPERTY∧ n∈ℕ ∧exp ∈ ℕ→ℙ(ℕ) ⇒&#10;              Const(p↦makeExpression(makeGeneralvaluesFromNats(exp(n))))= makeGeneralvaluesFromNats(exp(n))&#10;        /*  Const(price↦makeExpression(makeGeneralvaluesFromNats(allNatGreaterThanNat(20))))= makeGeneralvaluesFromNats({x∣x&gt;20 ∧ x∈ℕ})&#10;               */&#10;  @AXM_satisfies2 ∀exp,n,p·   p ∈ PROPERTY∧ n∈ ℕ×ℕ ∧exp ∈ ℕ×ℕ→ℙ(ℕ) ⇒&#10;              Const(p↦makeExpression(makeGeneralvaluesFromNats(exp(n))))= makeGeneralvaluesFromNats(exp(n))               // const return a set of property values that satisfies the expression e.g Const(c2↦price↦lessThan100)&#10;        /*  Const(price↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(20↦30))))= makeGeneralvaluesFromNats({x∣20≤x ∧ x≤30 ∧ x∈ℕ})   */&#10;  @AXM_getNatForGeneralValueStructure getNatForGeneralValue ∈ Nat ↣ ℕ //mapping from Nat to NAT&#10;  @AXM_getNatsForGeneralValuesStructure getNatsForGeneralValues ∈ ℙ(Nat) ↣ ℙ(ℕ)//mapping from Nat to NAT on sets&#10;  @AXM_getNatsForGeneralValues ∀a· a⊆Nat   ⇒ getNatsForGeneralValues(a) = { elt· elt ∈ a∣ getNatForGeneralValue(elt) }//getNatsForGeneralValues(a,b)={getNatsForGeneralValues(a),getNatsForGeneralValues(b)}&#10;  @AXM_getNatsForGeneralValues2 ∀a,n· a⊆Nat ∧ n ⊆ ℕ  ⇒ (getNatsForGeneralValues(a) = n ⇔ makeGeneralvaluesFromNats(n)  = a )//relation between the twos mappings&#10;  @AXM_getNatForGeneralValue2 ∀a,n· a∈Nat ∧ n∈ ℕ  ⇒( getNatForGeneralValue(a) = n ⇔ makeGeneralvalueFromNat(n)  = a)&#10;  theorem @THM_MakeGeneralValue  ∀a,b· a∈ℕ ∧ b∈ ℕ ∧ makeGeneralvalueFromNat(a)=makeGeneralvalueFromNat(b)  ⇒ a=b// if a and b has same image by makeGeneralvalueFromNat then a=b&#10;  theorem @THM_getNatForGeneralValue  ∀a,b· a∈Nat ∧ b∈Nat ∧ getNatForGeneralValue(a)=getNatForGeneralValue(b)  ⇒ a=b // if a and b has same image by getNatForGeneralValue then a=b&#10;end&#10;" version="3">
    <org.eventb.core.extendsContext name="_L1fvAMMbEe-VH7iYn6Ntow" org.eventb.core.target="C1"/>
    <org.eventb.core.constant name="_zWgz8K5bEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="makeGeneralvaluesFromNats"/>
    <org.eventb.core.constant name="_JfhkwK6kEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="allNatLessThanNat"/>
    <org.eventb.core.constant name="_Jfhkwa6kEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="allNatLessThanOrEqualNat"/>
    <org.eventb.core.constant name="_PIq0kK8SEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="allNatGreaterThanNat"/>
    <org.eventb.core.constant name="_7OxcgK8SEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="allNatGreaterThanOrEqualNat"/>
    <org.eventb.core.constant name="_JfhkxK6kEe-1rPj0DjDWfg" org.eventb.core.comment="ExpNat" org.eventb.core.generated="false" org.eventb.core.identifier="allNatInRange"/>
    <org.eventb.core.constant name="_owLS4KykEe-HWPN5LwE_LA" org.eventb.core.comment="makeRangeNat" org.eventb.core.generated="false" org.eventb.core.identifier="makeExpression"/>
    <org.eventb.core.constant name="_zc31YKzAEe-HWPN5LwE_LA" org.eventb.core.generated="false" org.eventb.core.identifier="Nat"/>
    <org.eventb.core.constant name="_7CtCkav1Ee-HWPN5LwE_LA" org.eventb.core.generated="false" org.eventb.core.identifier="makeGeneralvalueFromNat"/>
    <org.eventb.core.axiom name="_zc0LAKzAEe-HWPN5LwE_LA" org.eventb.core.comment="Nat is a subset of GENERALVALUES" org.eventb.core.generated="false" org.eventb.core.label="AXM_Nat" org.eventb.core.predicate="Nat ⊆  GENERALVALUES"/>
    <org.eventb.core.axiom name="_owKEwKykEe-HWPN5LwE_LA" org.eventb.core.comment="mapping to create an expression from a set of generalvalues. this is used in constructor Const" org.eventb.core.generated="false" org.eventb.core.label="AXM_EXP1" org.eventb.core.predicate="makeExpression ∈ ℙ(GENERALVALUES) → Expression"/>
    <org.eventb.core.axiom name="_kGcK4K5VEe-1rPj0DjDWfg" org.eventb.core.comment="mapping to create a Nat from NAT. this allows to work with properties having as values integers" org.eventb.core.generated="false" org.eventb.core.label="AXM_makeGeneralvalueFromNatStructure" org.eventb.core.predicate="makeGeneralvalueFromNat ∈ ℕ ↣ Nat"/>
    <org.eventb.core.axiom name="_zWfl0K5bEe-1rPj0DjDWfg" org.eventb.core.comment="mapping for a set of NAT. it returns a set of GENERALVALUE(Nat) {5,2} -  makeGeneralvaluesFromNats({5,2})= makeGeneralvaluesFromNats({5}) ∪ makeGeneralvaluesFromNats({2})" org.eventb.core.generated="false" org.eventb.core.label="AXM_makeGeneralvaluesFromNatsStructure" org.eventb.core.predicate="makeGeneralvaluesFromNats ∈ ℙ(ℕ) ↣  ℙ(Nat)"/>
    <org.eventb.core.axiom name="_CrPiQK5cEe-1rPj0DjDWfg" org.eventb.core.comment="{5,2} -  {mgv{5,2}}" org.eventb.core.generated="false" org.eventb.core.label="AXM_makeGeneralvaluesFromNats" org.eventb.core.predicate="∀a· a⊆ℕ   ⇒ makeGeneralvaluesFromNats(a) = { elt· elt ∈ a∣ makeGeneralvalueFromNat(elt)   }"/>
    <org.eventb.core.axiom name="_eSX-oK8SEe-1rPj0DjDWfg" org.eventb.core.comment="retrieve all NAT Less Than a NAT" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatLessThanNat" org.eventb.core.predicate="allNatLessThanNat ∈ ℕ → ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_eSX-oa8SEe-1rPj0DjDWfg" org.eventb.core.comment="allNatLessThanNat(3)={0,1,2}" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatLessThanNat2" org.eventb.core.predicate="∀n· n∈ℕ ⇒allNatLessThanNat(n) = {x∣x&lt;n ∧ x∈ℕ}"/>
    <org.eventb.core.axiom name="_eSX-oq8SEe-1rPj0DjDWfg" org.eventb.core.comment="retrieve all NAT Less Than or equal a ℕ" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatLessThanOrEqualNat" org.eventb.core.predicate="allNatLessThanOrEqualNat ∈ ℕ → ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_eSX-o68SEe-1rPj0DjDWfg" org.eventb.core.comment="allNatLessThanOrEqualNat(3)={0,1,2,4}" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatLessThanOrEqualNat2" org.eventb.core.predicate="∀n· n∈ℕ ⇒allNatLessThanOrEqualNat(n) = { x∣x≤n ∧ x∈ℕ }"/>
    <org.eventb.core.axiom name="_JffvkK6kEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatGreaterThanNat" org.eventb.core.predicate="allNatGreaterThanNat ∈ ℕ → ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_Jfg9sK6kEe-1rPj0DjDWfg" org.eventb.core.comment="allNatGreaterThanNat(4)={5,6,....}" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatGreaterThanNat2" org.eventb.core.predicate="∀n· n∈ℕ ⇒allNatGreaterThanNat(n) = {x∣x&gt;n ∧ x∈ℕ}"/>
    <org.eventb.core.axiom name="_7Oz4wK8SEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatGreaterThanOrEqualNat" org.eventb.core.predicate="allNatGreaterThanOrEqualNat ∈ ℕ → ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_7Oz4wa8SEe-1rPj0DjDWfg" org.eventb.core.comment="allNatGreaterThanOrEqualNat(4)={4,5,6,....}" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatGreaterThanOrEqualNat2" org.eventb.core.predicate="∀n· n∈ℕ ⇒allNatGreaterThanOrEqualNat(n) = {x∣x≥n ∧ x∈ℕ}"/>
    <org.eventb.core.axiom name="_7Oz4wq8SEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatInRange" org.eventb.core.predicate="allNatInRange ∈ ℕ×ℕ → ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_7Oz4w68SEe-1rPj0DjDWfg" org.eventb.core.comment="allNatInRange(0↦5)={0,1,2,3,4,5}" org.eventb.core.generated="false" org.eventb.core.label="AXM_allNatInRange2" org.eventb.core.predicate="∀mn,mx· mn∈ℕ ∧ mx∈ℕ ⇒ allNatInRange(mn↦mx) = {x∣mn≤x ∧ x≤mx ∧ x∈ℕ}"/>
    <org.eventb.core.axiom name="_-oUOkKzKEe-HWPN5LwE_LA" org.eventb.core.comment="Const(price↦makeExpression(makeGeneralvaluesFromNats(allNatGreaterThanNat(20))))= makeGeneralvaluesFromNats({x∣x&gt;20 ∧ x∈ℕ})&#10;               " org.eventb.core.generated="false" org.eventb.core.label="AXM_satisfies" org.eventb.core.predicate="∀exp,n,p·   p ∈ PROPERTY∧ n∈ℕ ∧exp ∈ ℕ→ℙ(ℕ) ⇒&#10;              Const(p↦makeExpression(makeGeneralvaluesFromNats(exp(n))))= makeGeneralvaluesFromNats(exp(n))"/>
    <org.eventb.core.constant name="_4J9_8K_cEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="getNatForGeneralValue"/>
    <org.eventb.core.constant name="_4J9_8a_cEe-1rPj0DjDWfg" org.eventb.core.comment="this context is to define NAT and possible relations on it. NAT is considered as a subset of GENERALVALUES. As rodin does not accept to write Nat ⊆  GENERALVALUES,we define NAT as a set Nat  " org.eventb.core.generated="false" org.eventb.core.identifier="getNatsForGeneralValues"/>
    <org.eventb.core.axiom name="_NWMZIMkjEe-mAKYQs_Orvw" org.eventb.core.comment="const return a set of property values that satisfies the expression e.g Const(c2↦price↦lessThan100)&#10;Const(price↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(20↦30))))= makeGeneralvaluesFromNats({x∣20≤x ∧ x≤30 ∧ x∈ℕ})   " org.eventb.core.generated="false" org.eventb.core.label="AXM_satisfies2" org.eventb.core.predicate="∀exp,n,p·   p ∈ PROPERTY∧ n∈ ℕ×ℕ ∧exp ∈ ℕ×ℕ→ℙ(ℕ) ⇒&#10;              Const(p↦makeExpression(makeGeneralvaluesFromNats(exp(n))))= makeGeneralvaluesFromNats(exp(n))"/>
    <org.eventb.core.axiom name="_4J-nAK_cEe-1rPj0DjDWfg" org.eventb.core.comment="mapping from Nat to NAT" org.eventb.core.generated="false" org.eventb.core.label="AXM_getNatForGeneralValueStructure" org.eventb.core.predicate="getNatForGeneralValue ∈ Nat ↣ ℕ"/>
    <org.eventb.core.axiom name="_4J-nAa_cEe-1rPj0DjDWfg" org.eventb.core.comment="mapping from Nat to NAT on sets" org.eventb.core.generated="false" org.eventb.core.label="AXM_getNatsForGeneralValuesStructure" org.eventb.core.predicate="getNatsForGeneralValues ∈ ℙ(Nat) ↣ ℙ(ℕ)"/>
    <org.eventb.core.axiom name="_YBr_cK_dEe-1rPj0DjDWfg" org.eventb.core.comment="getNatsForGeneralValues(a,b)={getNatsForGeneralValues(a),getNatsForGeneralValues(b)}" org.eventb.core.generated="false" org.eventb.core.label="AXM_getNatsForGeneralValues" org.eventb.core.predicate="∀a· a⊆Nat   ⇒ getNatsForGeneralValues(a) = { elt· elt ∈ a∣ getNatForGeneralValue(elt) }"/>
    <org.eventb.core.axiom name="_XtUKkK_gEe-1rPj0DjDWfg" org.eventb.core.comment="relation between the twos mappings" org.eventb.core.generated="false" org.eventb.core.label="AXM_getNatsForGeneralValues2" org.eventb.core.predicate="∀a,n· a⊆Nat ∧ n ⊆ ℕ  ⇒ (getNatsForGeneralValues(a) = n ⇔ makeGeneralvaluesFromNats(n)  = a )"/>
    <org.eventb.core.axiom name="_XtUxoK_gEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_getNatForGeneralValue2" org.eventb.core.predicate="∀a,n· a∈Nat ∧ n∈ ℕ  ⇒( getNatForGeneralValue(a) = n ⇔ makeGeneralvalueFromNat(n)  = a)"/>
    <org.eventb.core.axiom name="_rwuu0MzaEe-WvYbtYZTwGw" org.eventb.core.comment="if a and b has same image by makeGeneralvalueFromNat then a=b" org.eventb.core.generated="false" org.eventb.core.label="THM_MakeGeneralValue" org.eventb.core.predicate="∀a,b· a∈ℕ ∧ b∈ ℕ ∧ makeGeneralvalueFromNat(a)=makeGeneralvalueFromNat(b)  ⇒ a=b" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_rwuu0czaEe-WvYbtYZTwGw" org.eventb.core.comment="if a and b has same image by getNatForGeneralValue then a=b" org.eventb.core.generated="false" org.eventb.core.label="THM_getNatForGeneralValue" org.eventb.core.predicate="∀a,b· a∈Nat ∧ b∈Nat ∧ getNatForGeneralValue(a)=getNatForGeneralValue(b)  ⇒ a=b" org.eventb.core.theorem="true"/>
</org.eventb.core.contextFile>
