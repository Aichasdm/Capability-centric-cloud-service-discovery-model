<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.contextFile org.eventb.core.configuration="org.eventb.core.fwd;de.prob.symbolic.ctxBase" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1741010566283" org.eventb.texttools.text_representation="context VariantOf_Test extends VariantOf C_Nat_Test&#10;&#10;constants c1 c2 c3 c4 f5 f10 Melbourne Sydney locatedIn&#10;//this context define the motivating example in order to validate the model&#10;//for each capability we prove its validity then we prove the variantOfs in illustrated in the example&#10;axioms&#10;  theorem @THM_specifies ∀cap1,cap2,v1,v2,p·  partition(Capability_valid,{cap1},{cap2})∧ p∈ getPropertiesForCapability(cap1)∩getPropertiesForCapability(cap2)  ∧ p↦v1∈cap1 ∧p↦v2∈cap2 ∧ v1⊂v2 ⇒ (p↦cap1↦v1)↦(cap2↦v2)∈specifies // relation that determine if a value specifies another one&#10;  @AXM_f5Structure f5 ∈ PROPERTY × Nat →  Nat&#10;  @AXM_f5 (∀ng· ng ∈ Nat⇒ f5(weight↦ng)=makeGeneralvalueFromNat(5∗getNatForGeneralValue(ng))) // f5(x)=5*x&#10;  @AXM_f10Structure f10 ∈ PROPERTY × Nat →  Nat&#10;  @AXM_f10 (∀ng· ng ∈ Nat⇒ f10(weight↦ng)=makeGeneralvalueFromNat(10∗getNatForGeneralValue(ng))) // f10(x)=10*x&#10;  @AXM_c1 c1 = {actionCategory↦shipping,to↦Australia}&#10;  @AXM_c2 c2 ∈ Capability&#10;  @AXM_c2_2 c2 =  {actionCategory↦shipping,to↦Australia,weight↦Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatLessThanOrEqualNat(100)))),&#10;            price↦ CND(c2↦price↦&#10;            FN(c2↦price↦weight↦f5)  ↦FN(c2↦price↦weight↦f10)↦&#10;            condition(c2↦ weight↦&#10;            Const(weight↦makeExpression(&#10;            makeGeneralvaluesFromNats(allNatLessThanOrEqualNat(50)))&#10;            ))&#10;            )&#10;            }&#10;  @AXM_c3 Sydney ∈ location ∧ Sydney ∉ ConditionalValues  ∧ Melbourne ∈ location ∧ Melbourne ∉ ConditionalValues  ∧ c3 ∈Capability ∧ Sydney ≠Melbourne ∧ {Sydney}≠∅ ∧ {Melbourne}≠∅ ∧Australia≠{Sydney} ∧ Australia≠{Melbourne}&#10;  @AXM_c3_2 c3={ actionCategory↦shipping,&#10;            to↦Enum({{Sydney},{Melbourne}}),&#10;            weight↦ CND(c3↦weight↦&#10;            Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦70)))) ↦&#10;            Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦100)))) ↦&#10;            condition(c3↦ to↦{Sydney})&#10;            )   }&#10;  @AXM_c4 c4 ∈ Capability&#10;  @AXM_c4_2 c4 =  {actionCategory↦shipping,to↦{Sydney},weight↦Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦40)))),&#10;            price↦ FN(c4↦price↦weight↦f5)&#10;            }&#10; theorem @THM_capability_Validityc1 c1 ∈ Capability_valid&#10; theorem @THM_capability_Validityc3  c3 ∈ Capability_valid&#10; theorem @THM_capability_Validityc2 c2 ∈ Capability_valid&#10; theorem @THM_capability_Validityc4 c4 ∈ Capability_valid&#10;  @AXM_f5p (∀ng,p· ng ∈ Nat ∧ p ∈ PROPERTY⇒ f5(p↦ng) = makeGeneralvalueFromNat(5∗getNatForGeneralValue(ng))) // f5(x)=5*x&#10;  @AXM_f10p (∀ng,p· ng ∈ Nat ∧ p ∈ PROPERTY⇒ f10&#10;  (p↦ng) = makeGeneralvalueFromNat(10∗getNatForGeneralValue(ng))) // f5(x)=5*x&#10; theorem @THM__FunctionalValueMGVf5 ∀c,p,pf· c ∈ Capability ∧ p ∈  getPropertiesForCapability(c) ∧ pf ∈ getPropertiesForCapability(c) ∧&#10;                        hasMGV(p)=Nat ∧ hasMGV(pf)=Nat ∧ p≠pf∧&#10;                       FN(c↦p↦pf↦f5) ⊆ FunctionalValues ∧ getPossibleValuesOfPonCapability(c↦pf) ⊂ Nat ⇒&#10;                              FN(c↦p↦pf↦f5) ⊂ Nat&#10; theorem @THM__FunctionalValueMGVf10 ∀c,p,pf· c ∈ Capability ∧ p ∈  getPropertiesForCapability(c) ∧ pf ∈ getPropertiesForCapability(c) ∧&#10;                        hasMGV(p)=Nat ∧ hasMGV(pf)=Nat ∧ p≠pf∧&#10;                       FN(c↦p↦pf↦f10) ⊆ FunctionalValues ∧ getPossibleValuesOfPonCapability(c↦pf) ⊂ Nat ⇒&#10;                              FN(c↦p↦pf↦f10) ⊂ Nat&#10;&#10; theorem @THM_c2_VariantOf_c1 c2↦c1 ∈ variantOf&#10; @AXM_specifies_To location∈ dom(SpecificationRelationOnSets) ∧ locatedIn =SpecificationRelationOnSets(location) ∧ {Sydney}↦Australia ∈ locatedIn ∧ {Melbourne}↦Australia ∈ locatedIn ∧ {Sydney,Melbourne}≠ Australia&#10; theorem @THM_specifies_vC3To_vC1To (to↦ c3↦Enum({{Sydney},{Melbourne}}) )↦(c1↦Australia) ∈ specifies&#10; theorem @THM_specifies_vC3Weight_vCExtC1_C3Weight (weight↦c3↦ getPossibleValuesOfPonCapability(c3↦weight))↦&#10;           (capabilityExtension(c1↦c3)↦ getPossibleValuesOfPonCapability(capabilityExtension(c1↦c3)↦weight) ) ∈ specifies&#10; theorem @THM_c3_variantof_c1 c3↦c1 ∈ variantOf&#10; theorem @THM_specifies_vC4To_vCExtC2_C4To (to↦c4↦ getPossibleValuesOfPonCapability(c4↦to))↦(capabilityExtension(c2↦c4)↦getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦to)) ∈ specifies&#10; theorem @THM_specifies_vC4Weight_vCExtC2_C4Weight (weight↦c4↦getPossibleValuesOfPonCapability(c4↦weight) )↦&#10;                                             (capabilityExtension(c2↦c4)↦getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦weight) ) ∈ specifies&#10; theorem @THM_specifies_vC4Price_vCExtC2_C4Price (price↦c4↦ getPossibleValuesOfPonCapability(c4↦price)  )↦&#10;                                           (capabilityExtension(c2↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦price) ) ∈ specifies&#10;  theorem @THM_c4_variantof_c2 c4↦c2 ∈ variantOf&#10;  theorem @THM_specifies_vC4To_vC3To (to↦ c4↦{Sydney})↦(c3↦Enum({{Sydney},{Melbourne}})) ∈ specifies&#10;  theorem @THM_specifies_vC4To_vCExtC3_C4To (to↦ c4↦getPossibleValuesOfPonCapability(c4↦to))↦&#10;                                    (capabilityExtension(c3↦c4)↦&#10;                  getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦to) ) ∈ specifies&#10;  theorem @THM_specifies_vC4Weight_vCExtC3_C4Weight (weight↦c4↦ getPossibleValuesOfPonCapability(c4↦weight) )↦&#10;                                          (capabilityExtension(c3↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦weight)&#10;                                              )  ∈ specifies&#10;  theorem @THM_specifies_vC4Price_vCExtC3_C4Price (price↦c4↦ getPossibleValuesOfPonCapability(c4↦price) )↦&#10;                                          (capabilityExtension(c3↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦price)&#10;                                              )  ∈ specifies&#10;&#10; theorem @THM_c4_variantof_c3 c4↦c3 ∈ variantOf&#10;end&#10;" version="3">
    <org.eventb.core.extendsContext name="_WKbdoK5CEe-Wz9i2b53bfA" org.eventb.core.target="VariantOf"/>
    <org.eventb.core.extendsContext name="_k2-7Ma5OEe-1rPj0DjDWfh" org.eventb.core.target="C_Nat_Test"/>
    <org.eventb.core.axiom name="_HerkQLCaEe-1rPj0DjDWfg" org.eventb.core.comment="relation that determine if a value specifies another one" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies" org.eventb.core.predicate="∀cap1,cap2,v1,v2,p·  partition(Capability_valid,{cap1},{cap2})∧ p∈ getPropertiesForCapability(cap1)∩getPropertiesForCapability(cap2)  ∧ p↦v1∈cap1 ∧p↦v2∈cap2 ∧ v1⊂v2 ⇒ (p↦cap1↦v1)↦(cap2↦v2)∈specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_1lNWYLCbEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_f5Structure" org.eventb.core.predicate="f5 ∈ PROPERTY × Nat →  Nat"/>
    <org.eventb.core.axiom name="_h8EEQK_lEe-1rPj0DjDWfg" org.eventb.core.comment="f5(x)=5*x" org.eventb.core.generated="false" org.eventb.core.label="AXM_f5" org.eventb.core.predicate="(∀ng· ng ∈ Nat⇒ f5(weight↦ng)=makeGeneralvalueFromNat(5∗getNatForGeneralValue(ng)))"/>
    <org.eventb.core.axiom name="_GlppULLxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_f10Structure" org.eventb.core.predicate="f10 ∈ PROPERTY × Nat →  Nat"/>
    <org.eventb.core.axiom name="_GlqQYLLxEe-1rPj0DjDWfg" org.eventb.core.comment="f10(x)=10*x" org.eventb.core.generated="false" org.eventb.core.label="AXM_f10" org.eventb.core.predicate="(∀ng· ng ∈ Nat⇒ f10(weight↦ng)=makeGeneralvalueFromNat(10∗getNatForGeneralValue(ng)))"/>
    <org.eventb.core.axiom name="_eeE7cK_aEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c1" org.eventb.core.predicate="c1 = {actionCategory↦shipping,to↦Australia}"/>
    <org.eventb.core.constant name="_eeFigK_aEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="c1"/>
    <org.eventb.core.constant name="_OsBhsLJ8Ee-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="c2"/>
    <org.eventb.core.constant name="_Glq3cLLxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="c3"/>
    <org.eventb.core.constant name="_Glq3cbLxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="c4"/>
    <org.eventb.core.constant name="_eeFihK_aEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="f5"/>
    <org.eventb.core.axiom name="_OsBhsbJ8Ee-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c2" org.eventb.core.predicate="c2 ∈ Capability"/>
    <org.eventb.core.axiom name="_OsBhsrJ8Ee-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c2_2" org.eventb.core.predicate="c2 =  {actionCategory↦shipping,to↦Australia,weight↦Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatLessThanOrEqualNat(100)))),&#10;            price↦ CND(c2↦price↦&#10;            FN(c2↦price↦weight↦f5)  ↦FN(c2↦price↦weight↦f10)↦&#10;            condition(c2↦ weight↦&#10;            Const(weight↦makeExpression(&#10;            makeGeneralvaluesFromNats(allNatLessThanOrEqualNat(50)))&#10;            ))&#10;            )&#10;            }"/>
    <org.eventb.core.axiom name="_Glq3crLxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c3" org.eventb.core.predicate="Sydney ∈ location ∧ Sydney ∉ ConditionalValues  ∧ Melbourne ∈ location ∧ Melbourne ∉ ConditionalValues  ∧ c3 ∈Capability ∧ Sydney ≠Melbourne ∧ {Sydney}≠∅ ∧ {Melbourne}≠∅ ∧Australia≠{Sydney} ∧ Australia≠{Melbourne}"/>
    <org.eventb.core.axiom name="_Glq3c7LxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c3_2" org.eventb.core.predicate="c3={ actionCategory↦shipping,&#10;            to↦Enum({{Sydney},{Melbourne}}),&#10;            weight↦ CND(c3↦weight↦&#10;            Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦70)))) ↦&#10;            Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦100)))) ↦&#10;            condition(c3↦ to↦{Sydney})&#10;            )   }"/>
    <org.eventb.core.axiom name="_aViM8LL0Ee-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c4" org.eventb.core.predicate="c4 ∈ Capability"/>
    <org.eventb.core.axiom name="_hqN7gLL0Ee-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.label="AXM_c4_2" org.eventb.core.predicate="c4 =  {actionCategory↦shipping,to↦{Sydney},weight↦Const(weight↦makeExpression(makeGeneralvaluesFromNats(allNatInRange(10↦40)))),&#10;            price↦ FN(c4↦price↦weight↦f5)&#10;            }"/>
    <org.eventb.core.constant name="_GlregLLxEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="f10"/>
    <org.eventb.core.constant name="_gwz5MLLyEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="Melbourne"/>
    <org.eventb.core.constant name="_gwz5MbLyEe-1rPj0DjDWfg" org.eventb.core.generated="false" org.eventb.core.identifier="Sydney"/>
    <org.eventb.core.axiom name="_EHLboMCuEe-zL5p2OZXAbA" org.eventb.core.generated="false" org.eventb.core.label="THM_capability_Validityc1" org.eventb.core.predicate="c1 ∈ Capability_valid" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_EHMCsMCuEe-zL5p2OZXAbA" org.eventb.core.generated="false" org.eventb.core.label="THM_capability_Validityc3" org.eventb.core.predicate="c3 ∈ Capability_valid" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_Jw0MIMiaEe-mAKYQs_Orvw" org.eventb.core.generated="false" org.eventb.core.label="THM_capability_Validityc2" org.eventb.core.predicate="c2 ∈ Capability_valid" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_EHMCscCuEe-zL5p2OZXAbA" org.eventb.core.generated="false" org.eventb.core.label="THM_capability_Validityc4" org.eventb.core.predicate="c4 ∈ Capability_valid" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_A6_fYMzWEe-WvYbtYZTwGw" org.eventb.core.comment="f5(x)=5*x" org.eventb.core.generated="false" org.eventb.core.label="AXM_f5p" org.eventb.core.predicate="(∀ng,p· ng ∈ Nat ∧ p ∈ PROPERTY⇒ f5(p↦ng) = makeGeneralvalueFromNat(5∗getNatForGeneralValue(ng)))"/>
    <org.eventb.core.axiom name="_fYh0UMzgEe-WvYbtYZTwGw" org.eventb.core.comment="f5(x)=5*x" org.eventb.core.generated="false" org.eventb.core.label="AXM_f10p" org.eventb.core.predicate="(∀ng,p· ng ∈ Nat ∧ p ∈ PROPERTY⇒ f10&#10;  (p↦ng) = makeGeneralvalueFromNat(10∗getNatForGeneralValue(ng)))"/>
    <org.eventb.core.axiom name="_36AQ8MzeEe-WvYbtYZTwGw" org.eventb.core.generated="false" org.eventb.core.label="THM__FunctionalValueMGVf5" org.eventb.core.predicate="∀c,p,pf· c ∈ Capability ∧ p ∈  getPropertiesForCapability(c) ∧ pf ∈ getPropertiesForCapability(c) ∧&#10;                        hasMGV(p)=Nat ∧ hasMGV(pf)=Nat ∧ p≠pf∧&#10;                       FN(c↦p↦pf↦f5) ⊆ FunctionalValues ∧ getPossibleValuesOfPonCapability(c↦pf) ⊂ Nat ⇒&#10;                              FN(c↦p↦pf↦f5) ⊂ Nat" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_36A4AMzeEe-WvYbtYZTwGw" org.eventb.core.generated="false" org.eventb.core.label="THM__FunctionalValueMGVf10" org.eventb.core.predicate="∀c,p,pf· c ∈ Capability ∧ p ∈  getPropertiesForCapability(c) ∧ pf ∈ getPropertiesForCapability(c) ∧&#10;                        hasMGV(p)=Nat ∧ hasMGV(pf)=Nat ∧ p≠pf∧&#10;                       FN(c↦p↦pf↦f10) ⊆ FunctionalValues ∧ getPossibleValuesOfPonCapability(c↦pf) ⊂ Nat ⇒&#10;                              FN(c↦p↦pf↦f10) ⊂ Nat" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_p3hgAMnxEe-jRJ8UuHn6Cg" org.eventb.core.generated="false" org.eventb.core.label="THM_c2_VariantOf_c1" org.eventb.core.predicate="c2↦c1 ∈ variantOf" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_oUXH8NXVEe-uSJA-7DlAAw" org.eventb.core.generated="false" org.eventb.core.label="AXM_specifies_To" org.eventb.core.predicate="location∈ dom(SpecificationRelationOnSets) ∧ locatedIn =SpecificationRelationOnSets(location) ∧ {Sydney}↦Australia ∈ locatedIn ∧ {Melbourne}↦Australia ∈ locatedIn ∧ {Sydney,Melbourne}≠ Australia"/>
    <org.eventb.core.axiom name="_nYOGwM04Ee-Xg8cKYtI5Mw" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC3To_vC1To" org.eventb.core.predicate="(to↦ c3↦Enum({{Sydney},{Melbourne}}) )↦(c1↦Australia) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_QbGHMNgOEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC3Weight_vCExtC1_C3Weight" org.eventb.core.predicate="(weight↦c3↦ getPossibleValuesOfPonCapability(c3↦weight))↦&#10;           (capabilityExtension(c1↦c3)↦ getPossibleValuesOfPonCapability(capabilityExtension(c1↦c3)↦weight) ) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_o0zZgM04Ee-Xg8cKYtI5Mw" org.eventb.core.generated="false" org.eventb.core.label="THM_c3_variantof_c1" org.eventb.core.predicate="c3↦c1 ∈ variantOf" org.eventb.core.theorem="true"/>
    <org.eventb.core.constant name="_oUXvANXVEe-uSJA-7DlAAw" org.eventb.core.comment="this context define the motivating example in order to validate the model&#10;for each capability we prove its validity then we prove the variantOfs in illustrated in the example" org.eventb.core.generated="false" org.eventb.core.identifier="locatedIn"/>
    <org.eventb.core.axiom name="_MU7OINgxEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4To_vCExtC2_C4To" org.eventb.core.predicate="(to↦c4↦ getPossibleValuesOfPonCapability(c4↦to))↦(capabilityExtension(c2↦c4)↦getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦to)) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_MU7OIdgxEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4Weight_vCExtC2_C4Weight" org.eventb.core.predicate="(weight↦c4↦getPossibleValuesOfPonCapability(c4↦weight) )↦&#10;                                             (capabilityExtension(c2↦c4)↦getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦weight) ) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_MU71MNgxEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4Price_vCExtC2_C4Price" org.eventb.core.predicate="(price↦c4↦ getPossibleValuesOfPonCapability(c4↦price)  )↦&#10;                                           (capabilityExtension(c2↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c2↦c4)↦price) ) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_5BUuwNfpEe-H6Jfhm9iOfw" org.eventb.core.generated="false" org.eventb.core.label="THM_c4_variantof_c2" org.eventb.core.predicate="c4↦c2 ∈ variantOf" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_5BVV0NfpEe-H6Jfhm9iOfw" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4To_vC3To" org.eventb.core.predicate="(to↦ c4↦{Sydney})↦(c3↦Enum({{Sydney},{Melbourne}})) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_NpZBYNnLEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4To_vCExtC3_C4To" org.eventb.core.predicate="(to↦ c4↦getPossibleValuesOfPonCapability(c4↦to))↦&#10;                                    (capabilityExtension(c3↦c4)↦&#10;                  getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦to) ) ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_NpaPgNnLEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4Weight_vCExtC3_C4Weight" org.eventb.core.predicate="(weight↦c4↦ getPossibleValuesOfPonCapability(c4↦weight) )↦&#10;                                          (capabilityExtension(c3↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦weight)&#10;                                              )  ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_NpaPgdnLEe-HRuuSbFh0aQ" org.eventb.core.generated="false" org.eventb.core.label="THM_specifies_vC4Price_vCExtC3_C4Price" org.eventb.core.predicate="(price↦c4↦ getPossibleValuesOfPonCapability(c4↦price) )↦&#10;                                          (capabilityExtension(c3↦c4)↦ getPossibleValuesOfPonCapability(capabilityExtension(c3↦c4)↦price)&#10;                                              )  ∈ specifies" org.eventb.core.theorem="true"/>
    <org.eventb.core.axiom name="_5BWj8NfpEe-H6Jfhm9iOfw" org.eventb.core.generated="false" org.eventb.core.label="THM_c4_variantof_c3" org.eventb.core.predicate="c4↦c3 ∈ variantOf" org.eventb.core.theorem="true"/>
</org.eventb.core.contextFile>
